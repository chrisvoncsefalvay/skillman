# Publish to PyPI using Trusted Publishers (OIDC)
# - Builds distributions
# - Attaches them to the GitHub Release
# - Exchanges a GitHub OIDC id_token for an ephemeral PyPI upload token (Trusted Publishers)
#   -> You MUST replace the placeholder exchange step with the exact exchange command from:
#      https://docs.pypi.org/trusted-publishers/
#
name: Publish to PyPI

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Build distributions and attach to release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Build distributions
        run: python -m build --sdist --wheel

      - name: Check distributions
        run: twine check dist/*

      - name: Upload distributions as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

      - name: Attach distributions to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to PyPI (Trusted Publisher / OIDC)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout (for context)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: dist

      - name: Prepare environment
        run: |
          python -m pip install --upgrade pip
          pip install twine

      # ---------------------------
      # IMPORTANT: Token exchange
      # ---------------------------
      # If you have PyPI Trusted Publishers configured, PyPI will accept a GitHub OIDC id_token
      # and return an ephemeral upload token. The exact exchange call is shown in:
      #   https://docs.pypi.org/trusted-publishers/
      #
      # Replace the placeholder block below with the exact curl/POST example from the PyPI docs,
      # making sure to set the correct audience (if required) that you configured on PyPI.
      #
      # The result of the exchange must set PYPI_UPLOAD_TOKEN to the ephemeral token string.
      #
      - name: Exchange GitHub OIDC id_token for PyPI upload token (placeholder)
        id: exchange
        run: |
          echo "This step is a placeholder. Replace it with the PyPI docs exchange command."
          echo "Example (DO NOT USE verbatim):"
          echo "  # curl -X POST https://upload.pypi.org/authorize -H 'Authorization: Bearer <ID_TOKEN>' -d '...' "
          echo "Once you run the documented exchange, set the environment variable PYPI_UPLOAD_TOKEN."
          #
          # Example way to set an env var for the next steps (after you replace with working exchange):
          # echo "PYPI_UPLOAD_TOKEN=the-token-from-pypi" >> $GITHUB_ENV
          #
          exit 1

      # Once the previous step sets PYPI_UPLOAD_TOKEN in the environment, this step uploads.
      - name: Publish to PyPI with twine (ephemeral token)
        if: success() && env.PYPI_UPLOAD_TOKEN != ''
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ env.PYPI_UPLOAD_TOKEN }}
        run: |
          twine upload dist/*

      # Fallback: if you prefer to keep a repo secret PYPI_API_TOKEN, use it instead
      - name: Publish to PyPI (fallback using PYPI_API_TOKEN secret)
        if: ${{ env.PYPI_UPLOAD_TOKEN == '' }}
        uses: pypa/gh-action-pypi-publish@v1
        with:
          username: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
